<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog 
	  xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
	  xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext" 
	  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    
    <!--
        catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" 
        baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" 
    -->

    <changeSet author="Carol Geisler" id="tag0">
    	<tagDatabase tag="ddl_set_07_audit_start"/>
    </changeSet>

    <!-- The following updates are to implement auditing support -->

    <!--
        Application Authorization tables
    -->
    
    <!-- create table api_scope -->
    <changeSet author="Carol Geisler" id="CRTTAB_api_scope">
        <comment>Create the Api Scope table to map to api endpoints, either single or clusters.</comment>
        <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="api_scope" 
        	remarks="API_SCOPE captures the definition of a piece or group of functionality within the Sheriff Scheduling App. An Api Scope may be linked to an App Role to allow access to the functionality.
The API will associate an Api Scope string with each endpoint to determine what endpoints a given session is authorized for, and to adapt the ui accordingly.">
            <column name="api_scope_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="api_scope_string" type="VARCHAR(100)">
                <constraints nullable="false"/>
            </column>
            <column name="read_only_ind" type="INTEGER" defaultValue="0">
                <constraints nullable="false"/>
            </column>
            <column name="description" type="VARCHAR(200)"/>
            <column name="created_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="updated_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="api_scope" columnNames="api_scope_id" constraintName="pk_apsc"/>
        <addUniqueConstraint catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="api_scope" columnNames="api_scope_string" constraintName="uk_apsc"/>
        <sql>
        	GRANT SELECT ON ${POSTGRES_SCHEMA}.api_scope to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="api_scope"/>
        </rollback>
    </changeSet>
    
    <!-- create table app_role -->
    <changeSet author="Carol Geisler" id="CRTTAB_app_role">
        <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role" 
        	remarks="APP_ROLE captures the definition of roles within the Sheriff Scheduling application.  App Roles may be linked to App Users and App_Functions to control access to different functionality in the application.">
            <column name="app_role_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="app_role_name" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="description" type="VARCHAR(200)">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="updated_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role" columnNames="app_role_id" constraintName="pk_aprl"/>
        <sql>
        	GRANT SELECT ON ${POSTGRES_SCHEMA}.app_role to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role"/>
        </rollback>
    </changeSet>
    
    <!-- create table app_role_api_scope -->
    <changeSet author="Carol Geisler" id="CRTAB_app_role_api_scope">
        <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope" 
        	remarks="APP_ROLE_API_SCOPE is an XREF table that captures the relationshp between Roles and API scopes.">
            <column name="app_role_api_scope_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="app_role_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="api_scope_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="created_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="updated_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope" columnNames="app_role_api_scope_id" constraintName="pk_aprlapsc"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_role_api_scope" baseColumnNames="api_scope_id" constraintName="fk_aprlapsc_apsc" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="api_scope" referencedColumnNames="api_scope_id"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_role_api_scope" baseColumnNames="app_role_id" constraintName="fk_aprlapsc_aprl" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="app_role" referencedColumnNames="app_role_id"/>
        <createIndex catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope" indexName="ix_aprlapsc_apsc">
            <column name="api_scope_id"/>
        </createIndex>
        <createIndex catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope" indexName="ix_aprlapsc_aprl">
            <column name="app_role_id"/>
        </createIndex>
        <sql>
        	GRANT SELECT ON ${POSTGRES_SCHEMA}.app_role_api_scope to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_role_api_scope"/>
        </rollback>
    </changeSet>
    
    <!-- create table app_user -->
    <changeSet author="Carol Geisler" id="CRTAB_app_user">
        <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user" 
          remarks="APP_USER captures the the definition for users who can access the Sheriff Scheduling application.  An App User may be associated with a Sheriff, as well as Role and Courthouse information to manage authorization to data and app features.">
            <column name="app_user_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="siteminder_id" type="UUID"/>
            <column name="user_auth_id" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="display_name" type="VARCHAR(100)"/>
            <column name="system_account_ind" type="INTEGER" defaultValue="0">
                <constraints nullable="false"/>
            </column>
            <column name="default_location_id" type="UUID"/>
            <column name="created_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="sheriff_id" type="UUID"/>
            <column name="updated_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user" columnNames="app_user_id" constraintName="pk_usr"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_user" baseColumnNames="default_location_id" constraintName="fk_usr_dfcrth" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="courthouse" referencedColumnNames="courthouse_id"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_user" baseColumnNames="sheriff_id" constraintName="fk_usr_shr" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="sheriff" referencedColumnNames="sheriff_id"/>
        <createIndex catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user" indexName="ix_usr_dfcrths">
            <column name="default_location_id"/>
        </createIndex>
        <sql>
        	GRANT SELECT, INSERT, UPDATE ON ${POSTGRES_SCHEMA}.app_user to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user"/>
        </rollback>
    </changeSet>
    
    <!-- create table app_user_role -->
    <changeSet author="Carol Geisler" id="CRTAB_app_user_role">
        <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user_role" 
        	remarks="APP_USER_ROLE is an XREF table that captures the relationshp between Users and Roles.">
            <column name="app_user_role_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="app_user_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="app_role_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column defaultValueComputed="now()" name="effective_date" type="date">
                <constraints nullable="false"/>
            </column>
            <column name="expiry_date" type="date"/>
            <column name="location_id" type="UUID"/>
            <column name="created_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="updated_by" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user_role" columnNames="app_user_role_id" constraintName="pk_apusrl"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_user_role" baseColumnNames="app_role_id" constraintName="fk_apusrl_aprl" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="app_role" referencedColumnNames="app_role_id"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_user_role" baseColumnNames="app_user_id" constraintName="fk_apusrl_usr" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="app_user" referencedColumnNames="app_user_id"/>
        <addForeignKeyConstraint baseTableCatalogName="${POSTGRES_CATALOG}" baseTableSchemaName="${POSTGRES_SCHEMA}" baseTableName="app_user_role" baseColumnNames="location_id" constraintName="fk_apusrl_crth" deferrable="false" initiallyDeferred="false" onDelete="NO ACTION" onUpdate="NO ACTION" referencedTableCatalogName="${POSTGRES_CATALOG}" referencedTableSchemaName="${POSTGRES_SCHEMA}" referencedTableName="courthouse" referencedColumnNames="courthouse_id"/>
        <createIndex catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user_role" indexName="ix_usrl_aprl">
            <column name="app_role_id"/>
        </createIndex>
        <createIndex catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user_role" indexName="ix_usrl_crth">
            <column name="location_id"/>
        </createIndex>
        <createIndex catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user_role" indexName="ix_usrl_usr">
            <column name="app_user_id"/>
        </createIndex>
        <sql>
        	GRANT SELECT, INSERT, UPDATE ON ${POSTGRES_SCHEMA}.app_user_role to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="app_user_role"/>
        </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="DRPCOL_shrf_user_id">
      	<dropColumn  catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="sheriff">
		  		<column name="userid" type="VARCHAR(32)"/>
	    	</dropColumn>
	    	<rollback>
	    	  <addColumn catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="sheriff">
            <column name="userid" defaultValue="UNKNOWN (Column Recreated)" type="VARCHAR(32)" remarks="For mapping a user (idir) to a sheriff">
                <constraints nullable="false"/>
            </column>
	    	  </addColumn>
	    	</rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="CRTAB_aud_sheriff_duty">
                <createTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="aud_sheriff_duty">
            <column name="operation_code" type="VARCHAR(20)">
                <constraints nullable="false"/>
            </column>
            <column name="operation_dtm" type="TIMESTAMP WITH TIME ZONE">
                <constraints nullable="false"/>
            </column>
            <column name="operation_user_id" type="UUID"/>
            <column name="transaction_id" type="UUID"/>
            <column name="sheriff_duty_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="sheriff_id" type="UUID"/>
            <column name="duty_id" type="UUID"/>
            <column name="start_dtm" type="TIMESTAMP WITH TIME ZONE"/>
            <column name="end_dtm" type="TIMESTAMP WITH TIME ZONE"/>
            <column name="created_by" type="VARCHAR(32)"/>
            <column name="updated_by" type="VARCHAR(32)"/>
            <column name="created_dtm" type="TIMESTAMP WITH TIME ZONE"/>
            <column name="updated_dtm" type="TIMESTAMP WITH TIME ZONE"/>
            <column name="revision_count" type="numeric(10)">
                <constraints nullable="false"/>
            </column>
        </createTable>
        <addPrimaryKey catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="aud_sheriff_duty" columnNames="sheriff_duty_id,revision_count" constraintName="pk_aud_shrdty"/>
        <sql>
        	GRANT SELECT, INSERT, UPDATE ON ${POSTGRES_SCHEMA}.aud_sheriff_duty to ${POSTGRES_APP_USER};
        </sql>
        <rollback>
          <dropTable catalogName="${POSTGRES_CATALOG}" schemaName="${POSTGRES_SCHEMA}" tableName="aud_sheriff_duty"/>
        </rollback>
    </changeSet>
  
    <!-- Create or Replace trigger function for table stamps, and add triggers for each table -->
    <include file="procs/shersched.db.changelog-function.tab_stamp.xml"/>
    
    <changeSet author="Carol Geisler" id="ADDTRG_adr_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_adr_stamp ON ${POSTGRES_SCHEMA}.address;
        	CREATE TRIGGER trg_biu_adr_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.address
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_adr_stamp ON ${POSTGRES_SCHEMA}.address;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_asn_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_asn_stamp ON ${POSTGRES_SCHEMA}.assignment;
        	CREATE TRIGGER trg_biu_asn_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.assignment
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_asn_stamp ON ${POSTGRES_SCHEMA}.assignment;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_crth_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_crth_stamp ON ${POSTGRES_SCHEMA}.courthouse;
        	CREATE TRIGGER trg_biu_crth_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.courthouse
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_crth_stamp ON ${POSTGRES_SCHEMA}.courthouse;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_crtr_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_crtr_stamp ON ${POSTGRES_SCHEMA}.courtroom;
        	CREATE TRIGGER trg_biu_crtr_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.courtroom
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_crtr_stamp ON ${POSTGRES_SCHEMA}.courtroom;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_dty_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_dty_stamp ON ${POSTGRES_SCHEMA}.duty;
        	CREATE TRIGGER trg_biu_dty_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.duty
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_dty_stamp ON ${POSTGRES_SCHEMA}.duty;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_dtyrc_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_dtyrc_stamp ON ${POSTGRES_SCHEMA}.duty_recurrence;
        	CREATE TRIGGER trg_biu_dtyrc_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.duty_recurrence
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_dtyrc_stamp ON ${POSTGRES_SCHEMA}.duty_recurrence;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_jlrlcd_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_jlrlcd_stamp ON ${POSTGRES_SCHEMA}.jail_role_code;
        	CREATE TRIGGER trg_biu_jlrlcd_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.jail_role_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_jlrlcd_stamp ON ${POSTGRES_SCHEMA}.jail_role_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_lve_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_lve_stamp ON ${POSTGRES_SCHEMA}.leave;
        	CREATE TRIGGER trg_biu_lve_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.leave
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_lve_stamp ON ${POSTGRES_SCHEMA}.leave;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_lvcr_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_lvcr_stamp ON ${POSTGRES_SCHEMA}.leave_cancel_reason_code;
        	CREATE TRIGGER trg_biu_lvcr_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.leave_cancel_reason_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_lvcr_stamp ON ${POSTGRES_SCHEMA}.leave_cancel_reason_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_lvcd_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_lvcd_stamp ON ${POSTGRES_SCHEMA}.leave_code;
        	CREATE TRIGGER trg_biu_lvcd_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.leave_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_lvcd_stamp ON ${POSTGRES_SCHEMA}.leave_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_lvsbcd_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_lvsbcd_stamp ON ${POSTGRES_SCHEMA}.leave_sub_code;
        	CREATE TRIGGER trg_biu_lvsbcd_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.leave_sub_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_lvsbcd_stamp ON ${POSTGRES_SCHEMA}.leave_sub_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_otascd_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_otascd_stamp ON ${POSTGRES_SCHEMA}.other_assign_code;
        	CREATE TRIGGER trg_biu_otascd_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.other_assign_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_otascd_stamp ON ${POSTGRES_SCHEMA}.other_assign_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_rgn_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_rgn_stamp ON ${POSTGRES_SCHEMA}.region;
        	CREATE TRIGGER trg_biu_rgn_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.region
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_rgn_stamp ON ${POSTGRES_SCHEMA}.region;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_rn_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_rn_stamp ON ${POSTGRES_SCHEMA}.run;
        	CREATE TRIGGER trg_biu_rn_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.run
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_rn_stamp ON ${POSTGRES_SCHEMA}.run;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_shr_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_shr_stamp ON ${POSTGRES_SCHEMA}.sheriff;
        	CREATE TRIGGER trg_biu_shr_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.sheriff
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_shr_stamp ON ${POSTGRES_SCHEMA}.sheriff;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_shrdty_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_shrdty_stamp ON ${POSTGRES_SCHEMA}.sheriff_duty;
        	CREATE TRIGGER trg_biu_shrdty_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.sheriff_duty
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_shrdty_stamp ON ${POSTGRES_SCHEMA}.sheriff_duty;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_shrkcd_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_shrkcd_stamp ON ${POSTGRES_SCHEMA}.sheriff_rank_code;
        	CREATE TRIGGER trg_biu_shrkcd_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.sheriff_rank_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_shrkcd_stamp ON ${POSTGRES_SCHEMA}.sheriff_rank_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_shft_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_shft_stamp ON ${POSTGRES_SCHEMA}.shift;
        	CREATE TRIGGER trg_biu_shft_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.shift
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_shft_stamp ON ${POSTGRES_SCHEMA}.shift;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_wksccd_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_wksccd_stamp ON ${POSTGRES_SCHEMA}.work_section_code;
        	CREATE TRIGGER trg_biu_wksccd_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.work_section_code
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_wksccd_stamp ON ${POSTGRES_SCHEMA}.work_section_code;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
            
    <changeSet author="Carol Geisler" id="ADDTRG_apsc_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_apsc_stamp ON ${POSTGRES_SCHEMA}.api_scope;
        	CREATE TRIGGER trg_biu_apsc_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.api_scope
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_apsc_stamp ON ${POSTGRES_SCHEMA}.api_scope;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_aprl_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_aprl_stamp ON ${POSTGRES_SCHEMA}.app_role;
        	CREATE TRIGGER trg_biu_aprl_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.app_role
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_aprl_stamp ON ${POSTGRES_SCHEMA}.app_role;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_aprlapsc_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_aprlapsc_stamp ON ${POSTGRES_SCHEMA}.app_role_api_scope;
        	CREATE TRIGGER trg_biu_aprlapsc_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.app_role_api_scope
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_aprlapsc_stamp ON ${POSTGRES_SCHEMA}.app_role_api_scope;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_usr_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_usr_stamp ON ${POSTGRES_SCHEMA}.app_user;
        	CREATE TRIGGER trg_biu_usr_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.app_user
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_usr_stamp ON ${POSTGRES_SCHEMA}.app_user;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <changeSet author="Carol Geisler" id="ADDTRG_usrl_stamp">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_biu_usrl_stamp ON ${POSTGRES_SCHEMA}.app_user_role;
        	CREATE TRIGGER trg_biu_usrl_stamp BEFORE INSERT OR UPDATE ON ${POSTGRES_SCHEMA}.app_user_role
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.tab_stamp();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_biu_usrl_stamp ON ${POSTGRES_SCHEMA}.app_user_role;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>

    <include file="procs/shersched.db.changelog-function.audit_shrdty.xml"/>
    
    <changeSet author="Carol Geisler" id="ADDTRG_audit_shrdty">
      <sql>
        BEGIN;
        	DROP TRIGGER IF EXISTS trg_pud_shrdty_audit ON ${POSTGRES_SCHEMA}.sheriff_duty;
        	CREATE TRIGGER trg_pud_shrdty_audit after UPDATE OR DELETE ON ${POSTGRES_SCHEMA}.sheriff_duty
	            FOR EACH ROW EXECUTE PROCEDURE ${POSTGRES_SCHEMA}.audit_shrdty();
        COMMIT;
      </sql>
      <rollback>
        <sql>
          BEGIN;
          	DROP TRIGGER IF EXISTS trg_pud_shrdty_audit ON ${POSTGRES_SCHEMA}.sheriff_duty;
          COMMIT;
        </sql>
      </rollback>
    </changeSet>
    
    <!-- because the data inserts in the include file below are preliminary, 
         and in some cases strictly for DEV, I am including them directly here
         with the DDL.  The prod version auth data should be included in the
         data\shersched.db.changelog-data.prod.xml -->

		    
    <!-- auth table dev data -->
    <include file="data/shersched.db.changelog-authdata.dev.xml"/>

    <changeSet author="Carol Geisler" id="tag1">
    	<tagDatabase tag="ddl_set_07_audit_end"/>
    </changeSet>

</databaseChangeLog>
