package ca.bc.gov.jag.shuber.persistence.model;

import ca.bc.gov.jag.shuber.persistence.AbstractAuditableVersionable;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.hibernate.annotations.GenericGenerator;

/**
 * Courthouse generated by Hibernate Tools hbm2java.
 *
 * <p>Domain model for database table courthouse.
 *
 * @author hbm2java
 * @version 391
 */
@Entity
@Table(name = "courthouse"
    // ,schema="shersched"
)
public class Courthouse extends AbstractAuditableVersionable implements Serializable {

    /** UID. */
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(generator = "uuid2")
    @GenericGenerator(name = "uuid2", strategy = "uuid2")
    @Column(name = "courthouse_id", nullable = false, updatable = false)
    private UUID courthouseId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "address_id")
    private Address address;

    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "region_id", nullable = false)
    private Region region;

    @NotEmpty
    @Size(min = 1, max = 5)
    @Column(name = "courthouse_cd", unique = true, nullable = false, length = 5)
    private String courthouseCd;

    @NotEmpty
    @Size(min = 1, max = 100)
    @Column(name = "courthouse_name", nullable = false, length = 100)
    private String courthouseName;

    @Column(name = "location")
    private UUID location;

    @Column(name = "parent_courthouse_id")
    private UUID parentCourthouseId;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "courthouse")
    private List<Assignment> assignments = new ArrayList<Assignment>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "courthouse")
    private List<Sheriff> sheriffs = new ArrayList<Sheriff>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "courthouse")
    private List<Courtroom> courtrooms = new ArrayList<Courtroom>(0);

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "courthouse")
    private List<Run> runs = new ArrayList<Run>(0);
    /** No args constructor. */
    public Courthouse() {}

    /** Required args constructor. */
    public Courthouse(
            UUID courthouseId,
            Region region,
            String courthouseCd,
            String courthouseName,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount) {
        this.courthouseId = courthouseId;
        this.region = region;
        this.courthouseCd = courthouseCd;
        this.courthouseName = courthouseName;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
    }

    /** All args constructor. */
    public Courthouse(
            UUID courthouseId,
            Address address,
            Region region,
            String courthouseCd,
            String courthouseName,
            UUID location,
            UUID parentCourthouseId,
            String createdBy,
            String updatedBy,
            Date createdDtm,
            Date updatedDtm,
            long revisionCount,
            List<Assignment> assignments,
            List<Sheriff> sheriffs,
            List<Courtroom> courtrooms,
            List<Run> runs) {
        this.courthouseId = courthouseId;
        this.address = address;
        this.region = region;
        this.courthouseCd = courthouseCd;
        this.courthouseName = courthouseName;
        this.location = location;
        this.parentCourthouseId = parentCourthouseId;
        this.createdBy = createdBy;
        this.updatedBy = updatedBy;
        this.createdDtm = createdDtm;
        this.updatedDtm = updatedDtm;
        this.revisionCount = revisionCount;
        this.assignments = assignments;
        this.sheriffs = sheriffs;
        this.courtrooms = courtrooms;
        this.runs = runs;
    }

    public UUID getCourthouseId() {
        return this.courthouseId;
    }

    public void setCourthouseId(UUID courthouseId) {
        this.courthouseId = courthouseId;
    }

    public Address getAddress() {
        return this.address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    public Region getRegion() {
        return this.region;
    }

    public void setRegion(Region region) {
        this.region = region;
    }

    public String getCourthouseCd() {
        return this.courthouseCd;
    }

    public void setCourthouseCd(String courthouseCd) {
        this.courthouseCd = courthouseCd;
    }

    public String getCourthouseName() {
        return this.courthouseName;
    }

    public void setCourthouseName(String courthouseName) {
        this.courthouseName = courthouseName;
    }

    public UUID getLocation() {
        return this.location;
    }

    public void setLocation(UUID location) {
        this.location = location;
    }

    public UUID getParentCourthouseId() {
        return this.parentCourthouseId;
    }

    public void setParentCourthouseId(UUID parentCourthouseId) {
        this.parentCourthouseId = parentCourthouseId;
    }

    public List<Assignment> getAssignments() {
        return this.assignments;
    }

    public void setAssignments(List<Assignment> assignments) {
        this.assignments = assignments;
    }

    public List<Sheriff> getSheriffs() {
        return this.sheriffs;
    }

    public void setSheriffs(List<Sheriff> sheriffs) {
        this.sheriffs = sheriffs;
    }

    public List<Courtroom> getCourtrooms() {
        return this.courtrooms;
    }

    public void setCourtrooms(List<Courtroom> courtrooms) {
        this.courtrooms = courtrooms;
    }

    public List<Run> getRuns() {
        return this.runs;
    }

    public void setRuns(List<Run> runs) {
        this.runs = runs;
    }
    
    @Transient
	@Override
	public String getIdPath() {
		return "/courthouses/" + courthouseId;
	}
}
